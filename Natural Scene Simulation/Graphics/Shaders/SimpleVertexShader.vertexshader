#version 330 core


layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor;
layout(location = 2) in vec2 uvdata;
layout(location = 3) in vec3 vertexNormal_modelspace;

uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;

out vec3 fragColor;
out vec2 uv;
out vec3 normal_worldspace;
out vec3 position_worldspace;

out vec3 viewspace;

void main()
{
	gl_Position =  projection*view*model*vec4(vertexPosition_modelspace,1);
	fragColor = vertexColor;
	uv = uvdata;
	position_worldspace = vec3(model * vec4(vertexPosition_modelspace,1));
	normal_worldspace = normalize(vec3(model * vec4(vertexNormal_modelspace,0)));

	viewspace = vec3(view * model * vec4(vertexPosition_modelspace, 1));
}


