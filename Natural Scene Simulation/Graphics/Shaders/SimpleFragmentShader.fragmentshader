#version 330 core

in vec3 fragColor;
out vec3 color;
in vec2 uv;
uniform sampler2D myTextureSampler;

in vec3 position_worldspace;
in vec3 normal_worldspace;

uniform vec3 LightPosition_worldspace;
uniform vec3 EyePosition_worldspace;
uniform vec3 ambientLight;
uniform vec2 data;

void main()
{
	vec3 Il = vec3(1,1,0);
	vec3 textureColor = texture(myTextureSampler, uv).rgb;

	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	vec3 diffuseLight = vec3(brightness,brightness,brightness);
	diffuseLight = Il*clamp(diffuseLight,0,1); //clamps value to 0 if less than 0 and to 1 if greater than 1

	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);
	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	float specularExponent = data.y;
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = vec3(specularity,specularity,specularity);
	specularLight = Il*clamp(specularLight,0,1);

	float d = abs(distance(position_worldspace,LightPosition_worldspace));
	float r = data.x;
	float att = 1 - (d/r);
	if(att < 0)
	   att = 0;

	color = ambientLight + (diffuseLight + specularLight)*att;
	color = color*textureColor;
}
